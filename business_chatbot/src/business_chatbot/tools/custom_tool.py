from crewai.tools import BaseTool
from typing import Type
from pydantic import BaseModel, Field
import os
import pandas as pd
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Type, Optional

class CSVGenerator:
    """G√©n√®re des fichiers CSV et cr√©e des sections markdown pour le t√©l√©chargement."""

    def __init__(self, output_dir: Optional[str] = None):
        if output_dir:
            self.output_dir = Path(output_dir)
        else:
            self.output_dir = Path.home() / "Downloads"
        self.output_dir.mkdir(parents=True, exist_ok=True)

    # Move this method outside of __init__ and directly under the class
    def create_enhanced_download_section(
            self,
            data: List[Dict[str, Any]],
            filename_prefix: str = "analysis",
            analysis_type: str = "business",
            description: str = "Donn√©es compl√®tes de l'analyse"
    ) -> str:
        """Cr√©e une section markdown compl√®te avec le lien de t√©l√©chargement du CSV."""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{filename_prefix}_{analysis_type}_{timestamp}.csv"
            file_path = self.output_dir / filename

            df = pd.DataFrame(data)
            df.to_csv(file_path, index=False, encoding='utf-8-sig')

            if not file_path.exists():
                raise FileNotFoundError(f"La cr√©ation du fichier a √©chou√© : {file_path}")

            file_size_kb = round(os.path.getsize(file_path) / 1024, 2)

            return f"""## üìä Vos Donn√©es Pr√™tes √† T√©l√©charger

    [**T√©l√©charger le fichier CSV ({file_size_kb} KB)**]({file_path.as_uri()})

    **D√©tails du fichier :**
    - **Nom :** `{filename}`
    - **Registres :** `{len(data)}`
    - **Emplacement :** `{self.output_dir}`

    *{description}*
    """
        except Exception as e:
            return f"""## Erreur de G√©n√©ration CSV
    Une erreur est survenue : {str(e)}"""


class CSVFileCreatorInput(BaseModel):
     """Sch√©ma d'input pour l'outil de cr√©ation de fichiers CSV."""
     data: List[Dict[str, Any]] = Field(..., description="Liste de dictionnaires (donn√©es brutes) √† sauvegarder en CSV.")
     analysis_type: str = Field(default="export", description="Type d'analyse (ex: 'b2b', 'b2c') pour nommer le fichier.")
     filename_prefix: str = Field(default="analysis_results", description="Pr√©fixe personnalis√© pour le nom du fichier.")

class CSVFileCreatorTool(BaseTool):
    name: str = "CSV File Creator"
    description: str = (
        "Outil indispensable pour sauvegarder une liste de donn√©es structur√©es (dictionnaires) "
        "dans un fichier CSV et g√©n√©rer une section markdown compl√®te avec un lien de t√©l√©chargement. "
        "√Ä utiliser syst√©matiquement lorsque des donn√©es doivent √™tre fournies √† l'utilisateur."
    )
    args_schema: Type[BaseModel] = CSVFileCreatorInput
    csv_generator: CSVGenerator = CSVGenerator()

    def _run(self, data: List[Dict[str, Any]], analysis_type: str = "export", filename_prefix: str = "analysis_results") -> str:
        """Ex√©cute la logique de cr√©ation de CSV et retourne la section markdown."""
        print(f"--- Executing CSVFileCreatorTool for {analysis_type} ---")
        return self.csv_generator.create_enhanced_download_section(
            data=data,
            filename_prefix=filename_prefix,
            analysis_type=analysis_type,
            description=f"Donn√©es export√©es suite √† l'analyse de type {analysis_type}."
        )